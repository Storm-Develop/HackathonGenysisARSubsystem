// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    public partial class KnowledgeBaseMessage
    {
        [JsonProperty("pageCount")]
        public long PageCount { get; set; }

        [JsonProperty("pageNumber")]
        public long PageNumber { get; set; }

        [JsonProperty("pageSize")]
        public long PageSize { get; set; }

        [JsonProperty("query")]
        public string Query { get; set; }

        [JsonProperty("results")]
        public ResultKnowledgeBase[] Results { get; set; }

        [JsonProperty("searchId")]
        public string SearchId { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class ResultKnowledgeBase
    {
        [JsonProperty("KnowledgeBase")]
        public KnowledgeBase KnowledgeBase { get; set; }

        [JsonProperty("categories")]
        public Category[] Categories { get; set; }

        [JsonProperty("confidence")]
        public double Confidence { get; set; }

        [JsonProperty("externalUrl")]
        public string ExternalUrl { get; set; }

        [JsonProperty("faq")]
        public Faq Faq { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("languageCode")]
        public string LanguageCode { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Faq
    {
        [JsonProperty("alternatives")]
        public object[] Alternatives { get; set; }

        [JsonProperty("answer")]
        public string Answer { get; set; }

        [JsonProperty("question")]
        public string Question { get; set; }
    }

    public partial class KnowledgeBase
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }
    }

    public partial class KnowledgeBaseMessage
    {
        public static KnowledgeBaseMessage FromJson(string json) => JsonConvert.DeserializeObject<KnowledgeBaseMessage>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this KnowledgeBaseMessage self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
